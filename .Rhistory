library(arules)
library(arulesViz)
library(arules)
library(arulesViz)
basket <- read.transactions("yourdata.csv", sep=",")
rules <- apriori(basket, parameter=list(support=0.005, confidence=0.2, minlen=2))
summary(rules)
plot(rules)
filtered_rules <- subset(rules, subset = lift > 1.2 & confidence > 0.5)
plot(filtered_rules)
library(arules)
library(arulesViz)
basket <- read.transactions("yourdata.csv", sep=",")
rules <- apriori(basket, parameter=list(support=0.005, confidence=0.2, minlen=2))
summary(rules)
plot(rules)
inspect(rules)
library(arules)
library(arulesViz)
basket <- read.transactions("yourdata.csv", sep=",")
rules <- apriori(basket, parameter=list(support=0.005, confidence=0.2, minlen=2))
summary(rules)
plot(rules)
inspect(rules)
filtered_rules <- subset(rules, subset = lift > 1.2 & confidence > 0.5)
plot(filtered_rules)
library(arules)
library(arulesViz)
basket <- read.transactions("yourdata.csv", sep=",")
rules <- apriori(basket, parameter=list(support=0.005, confidence=0.2, minlen=2))
summary(rules)
plot(rules)
filtered_rules <- subset(rules, subset = lift > 1.2 & confidence > 0.5)
plot(filtered_rules)
inspect(rules)
library(arules)
library(arulesViz)
basket <- read.transactions("yourdata.csv", sep=",")
rules <- apriori(basket, parameter=list(support=0.005, confidence=0.2, minlen=2))
summary(rules)
plot(rules)
filtered_rules <- subset(rules, subset = lift > 1.2 & confidence > 0.5)
plot(filtered_rules)
inspect(rules)
library(arules)
library(arulesViz)
library(arules)
library(arulesViz)
basket <- read.transactions("yourdata.csv", sep=",")
rules <- apriori(basket, parameter=list(support=0.005, confidence=0.2, minlen=2))
summary(rules)
plot(rules)
filtered_rules <- subset(rules, subset = lift > 1.2 & confidence > 0.5)
plot(filtered_rules)
inspect(filtered_rules)
inspect(rules)
library(arules)
library(arulesViz)
library(arules)
library(arulesViz)
basket <- read.transactions("yourdata.csv", sep=",")
rules <- apriori(basket, parameter=list(support=0.005, confidence=0.2, minlen=2))
summary(rules)
plot(rules)
filtered_rules <- subset(rules, subset = lift > 1.2 & confidence > 0.5)
plot(filtered_rules)
inspect(rules)
library(arules)
library(arulesViz)
library(arules)
library(arulesViz)
basket <- read.transactions("yourdata.csv", sep=",")
rules <- apriori(basket, parameter=list(support=0.005, confidence=0.2, minlen=2))
summary(rules)
plot(rules)
filtered_rules <- subset(rules, subset = lift > 1.2 & confidence > 0.5)
plot(filtered_rules)
filtered_rules <- subset(rules, subset = lift > 1.2 & confidence > 0.5)
plot(filtered_rules)
inspect(rules)
library(arules)
library(arulesViz)
library(arules)
library(arulesViz)
basket <- read.transactions("yourdata.csv", sep=",")
rules <- apriori(basket, parameter=list(support=0.005, confidence=0.2, minlen=2))
summary(rules)
plot(rules)
filtered_rules <- subset(rules, subset = lift > 1.2 & confidence > 0.5)
plot(filtered_rules)
filtered_rules <- subset(rules, subset = lift > 0.5 & confidence > 0.5)
plot(filtered_rules)
x=5
y=6
print(x,"+",y,"=",x+y)
print(paste(x,"+",y,"=",x+y))
x<-c(2,12)
x
x[2]
y<-12
x+y
# Create two vectors
vector1 <- c(1, 2, 3)
vector2 <- c("a", "b", "c")
# Use dim() function
dim_vector1 <- dim(vector1)
dim_vector2 <- dim(vector2)
# Use length() function
length_vector1 <- length(vector1)
length_vector2 <- length(vector2)
# Use is.numeric() function
is_numeric_vector1 <- is.numeric(vector1)
is_numeric_vector2 <- is.numeric(vector2)
# Use is.character() function
is_character_vector1 <- is.character(vector1)
is_character_vector2 <- is.character(vector2)
# Use rbind() function
rbind_vectors <- rbind(vector1, vector2)
# Use cbind() function
cbind_vectors <- cbind(vector1, vector2)
# Print the results
cat("Vector 1: ", vector1, "\n")
cat("Vector 2: ", vector2, "\n\n")
cat("dim(Vector 1): ", dim_vector1, "\n")
cat("dim(Vector 2): ", dim_vector2, "\n\n")
cat("length(Vector 1): ", length_vector1, "\n")
cat("length(Vector 2): ", length_vector2, "\n\n")
cat("is.numeric(Vector 1): ", is_numeric_vector1, "\n")
cat("is.numeric(Vector 2): ", is_numeric_vector2, "\n\n")
cat("is.character(Vector 1): ", is_character_vector1, "\n")
cat("is.character(Vector 2): ", is_character_vector2, "\n\n")
cat("rbind(Vector 1, Vector 2):\n", rbind_vectors, "\n\n")
cat("cbind(Vector 1, Vector 2):\n", cbind_vectors, "\n")
dim(x)
dim(y)
is.numeric(x)
n=5
while(n>0)
print(n*n-1)
while(n>0)
n=n-1print(n*n-1)
n=n-1   print(n*n-1)
source("~/.active-rstudio-document")
source("~/.active-rstudio-document")
source("~/.active-rstudio-document")
source("~/.active-rstudio-document")
source("~/.active-rstudio-document")
source("~/.active-rstudio-document")
source("~/.active-rstudio-document")
# Create matrices
matrix1 <- matrix(1:6, nrow = 2)
matrix2 <- matrix(1:6, nrow = 2)
matrix3 <- matrix(7:12, nrow = 2)
# Create vectors
vector1 <- c(1, 2, 3)
vector2 <- c(1, 2, 3)
vector3 <- c(4, 5, 6)
# Compare matrices
cat("Matrix 1:\n")
print(matrix1)
cat("\nMatrix 2:\n")
print(matrix2)
cat("\nMatrix 3:\n")
print(matrix3)
cat("\nComparison of Matrix 1 and Matrix 2:\n")
cat("matrix1 == matrix2: ")
print(matrix1 == matrix2)
cat("\nComparison of Matrix 1 and Matrix 3:\n")
cat("matrix1 == matrix3: ")
print(matrix1 == matrix3)
# Compare vectors
cat("\nVector 1: ", vector1, "\n")
cat("Vector 2: ", vector2, "\n")
cat("Vector 3: ", vector3, "\n\n")
cat("Comparison of Vector 1 and Vector 2:\n")
cat("vector1 == vector2: ")
print(vector1 == vector2)
cat("\nComparison of Vector 1 and Vector 3:\n")
cat("vector1 == vector3: ")
print(vector1 == vector3)
cat(Matrix1==vector1)
cat(matrix1==vector1)
# Logical AND operator
cat("Logical AND Operator (&&):\n")
cat("TRUE && TRUE: ", TRUE && TRUE, "\n")
cat("TRUE && FALSE: ", TRUE && FALSE, "\n")
cat("FALSE && TRUE: ", FALSE && TRUE, "\n")
cat("FALSE && FALSE: ", FALSE && FALSE, "\n\n")
# Logical OR operator
cat("Logical OR Operator (||):\n")
cat("TRUE || TRUE: ", TRUE || TRUE, "\n")
cat("TRUE || FALSE: ", TRUE || FALSE, "\n")
cat("FALSE || TRUE: ", FALSE || TRUE, "\n")
cat("FALSE || FALSE: ", FALSE || FALSE, "\n")
log10(sqrt(50))
library(arules)
library(arulesViz)
library(arules)
library(arulesViz)
basket <- read.transactions("yourdata.csv", sep=",")
rules <- apriori(basket, parameter=list(support=0.005, confidence=0.2, minlen=2))
summary(rules)
plot(rules)
inspect(rules)
filtered_rules <- subset(rules, subset = lift > 1.2 & confidence > 0.5)
plot(filtered_rules)
inspect(filtered_rules)
filtered_rules <- subset(rules, subset = lift > 0.5 & confidence > 0.5)
plot(filtered_rules)
library(arules)
library(arulesViz)
library(arules)
library(arulesViz)
basket <- read.transactions("yourdata.csv", sep=",")
rules <- apriori(basket, parameter=list(support=0.005, confidence=0.2, minlen=2))
summary(rules)
plot(rules)
inspect(rules)
filtered_rules <- subset(rules, subset = lift > 0.5 & confidence > 0.5)
plot(filtered_rules)
inspect(filtered_rules)
filtered_rules <- subset(rules, subset = lift > 0.8 & confidence > 0.5)
plot(filtered_rules)
library(arules)
library(arulesViz)
library(arules)
library(arulesViz)
basket <- read.transactions("yourdata.csv", sep=",")
rules <- apriori(basket, parameter=list(support=0.005, confidence=0.2, minlen=2))
summary(rules)
plot(rules)
inspect(rules)
filtered_rules <- subset(rules, subset = lift > 0.5 & confidence > 0.5)
plot(filtered_rules)
inspect(filtered_rules)
